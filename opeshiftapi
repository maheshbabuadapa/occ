from flask import Flask, jsonify
import subprocess

app = Flask(__name__)

CLUSTERS = {
    "dev": {
        "url": "https://dev-openshift-cluster-url:6443",
        "username": "dev-username",
        "password": "dev-password",
        "namespace": "dev-namespace"
    },
    "sit": {
        "url": "https://sit-openshift-cluster-url:6443",
        "username": "sit-username",
        "password": "sit-password",
        "namespace": "sit-namespace"
    },
    "uat": {
        "url": "https://uat-openshift-cluster-url:6443",
        "username": "uat-username",
        "password": "uat-password",
        "namespace": "uat-namespace"
    },
    "preprod": {
        "url": "https://preprod-openshift-cluster-url:6443",
        "username": "preprod-username",
        "password": "preprod-password",
        "namespace": "preprod-namespace"
    }
}

def login_to_cluster(cluster):
    cluster_info = CLUSTERS[cluster]
    login_cmd = [
        "oc", "login", cluster_info["url"],
        "-u", cluster_info["username"],
        "-p", cluster_info["password"],
        "--insecure-skip-tls-verify=true"
    ]
    result = subprocess.run(login_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if result.returncode != 0:
        print(f"Login failed: {result.stderr}")
    else:
        print(f"Login successful for {cluster}")

def get_deployment_images(cluster):
    login_to_cluster(cluster)
    namespace = CLUSTERS[cluster]["namespace"]
    cmd = [
        "oc", "get", "deployments", "-n", namespace, "-o",
        "jsonpath={range .items[*]}{range .spec.template.spec.containers[*]}{.image}{\"\\n\"}{end}{end}"
    ]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    images = []
    if result.returncode == 0:
        images = list(set(result.stdout.strip().split('\n')))
    else:
        print(f"Error executing command: {result.stderr}")

    return images

@app.route('/<env>')
def index(env):
    if env not in CLUSTERS:
        return jsonify({"error": "Environment not found"}), 404
    images = get_deployment_images(env)
    return jsonify(images)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
